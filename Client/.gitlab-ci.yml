stages:
  - review
  - build
  - analysis
  - test
  - artifact
  - release
  - to_be_testing
  - slack_notif

variables:
  DOCKER_IMAGE_TAG: 453734fb4646fb5762682cb669c8a580aa16f03f
  WIX_INSTALL_PATH: C:\wix311

# Review

reviewdog:
  stage: review
  tags:
    - tanpopo03
  image: alpine:latest
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  before_script:
    - apk --no-cache add py-pip git openssl wget
    - pip install cpplint
    - mkdir ~/bin
    - export PATH="$HOME/bin:$PATH"
    - wget -O - -q https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b ~/bin v0.10.2
  script:
    - reviewdog -reporter=gitlab-mr-discussion

# Build

build:x86:
  stage: build
  image: $CI_REGISTRY_IMAGE:$DOCKER_IMAGE_TAG
  tags:
    - docker-windows
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_TAG'
  script:
    - . .\Tools\Build-Arch x86
  artifacts:
    paths:
      - artifact
    expire_in: 7 day

build:x64:
  stage: build
  image: $CI_REGISTRY_IMAGE:$DOCKER_IMAGE_TAG
  tags:
    - docker-windows
  rules:
    - if: '$CI_COMMIT_TAG'
  script:
    - . .\Tools\Build-Arch x64
  artifacts:
    paths:
      - artifact
    expire_in: 7 day

build:docker_image:
  stage: build
  tags:
    - windows-shell
    - windows10
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - Tools/Docker/Dockerfile
      when: manual
      allow_failure: true
    - if: '$CI_COMMIT_TAG'
      when: manual
      allow_failure: true
  script:
    - echo "$CI_REGISTRY_USER, $CI_REGISTRY_PASSWORD, $CI_REGISTRY, $CI_REGISTRY_IMAGE, $CI_COMMIT_SHA"
    - docker build -t $CI_REGISTRY_IMAGE`:$CI_COMMIT_SHA .\Tools\Docker
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $CI_REGISTRY_IMAGE`:$CI_COMMIT_SHA
  after_script:
    - docker logout $CI_REGISTRY

# Analysis

sonar-scanner:
  stage: analysis
  image: $CI_REGISTRY_IMAGE:$DOCKER_IMAGE_TAG
  tags:
    - docker-windows
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_TAG'
  needs: [ "build:x86" ]
  variables:
    GIT_DEPTH: 0
  script:
    - sonar-scanner.bat
  allow_failure: true
  timeout: 10m

# Test

test:x86:
  stage: test
  image: $CI_REGISTRY_IMAGE:$DOCKER_IMAGE_TAG
  tags:
    - docker-windows
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_TAG'
  variables:
    GIT_DEPTH: 0
  script:
    - . .\Tools\Check-Installer.ps1 .\artifact\x86\BizTelework.msi
    - .\artifact\x86\UnitTestLib.exe --gtest_output=xml:unit_test_lib.xml --gtest_filter=-*_NotRunOnCI.*
    - .\artifact\x86\UnitTestBizTelework.exe --gtest_output=xml:unit_test_biz_telework.xml --gtest_filter=-*_NotRunOnCI.*
    - .\artifact\x86\UnitTestBizTeleworkUpdater.exe --gtest_output=xml:unit_test_biz_telework_updater.xml --gtest_filter=-*_NotRunOnCI.*
  allow_failure: true
  timeout: 10m
  needs: [ "build:x86" ]
  cache:
    key: ${CI_JOB_NAME}
    paths:
      - sonar_cfamily_cache
  artifacts:
    reports:
      junit: unit_test_*.xml

test:x64:
  stage: test
  image: $CI_REGISTRY_IMAGE:$DOCKER_IMAGE_TAG
  tags:
    - docker-windows
  rules:
    - if: '$CI_COMMIT_TAG'
  variables:
    GIT_DEPTH: 0
  script:
    - . .\Tools\Check-Installer.ps1 .\artifact\x64\BizTelework.msi
  allow_failure: true
  timeout: 10m
  needs: [ "build:x64" ]

# Artifact

artifact:
  stage: artifact
  tags:
    - tanpopo03
  rules:
    - if: '$CI_COMMIT_TAG'
  image: alpine:latest
  before_script: []
  script:
    - echo "Artifact"
  needs: [ "build:x86" ]
  artifacts:
    paths:
      - artifact

relnote:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: '$CI_COMMIT_TAG =~ /^release/'
  tags:
    - tanpopo03
  before_script: []
  script:
    - |
        CHANGELOG=$(awk -v tag="$CI_COMMIT_TAG" '$3 == tag{flag=1} /---/{flag=0} flag' CHANGELOG.md)
        MD5SUM=$(md5sum artifact/x86/BizTelework.msi | awk '{ print $1 }')
        RELNOTE="${CHANGELOG}
        ## ■ バイナリ
        * 開発環境用 https://gitlab.tokyo.optim.co.jp/bizwindows/optimal_biz_windows_telework/-/jobs/artifacts/${CI_COMMIT_TAG}/raw/artifact/x86/BizTelework.msi?job=artifact
          * MD5 ファイルハッシュ ${MD5SUM}"
    - release-cli create --description "$RELNOTE" --tag-name "$CI_COMMIT_TAG"

create_release_note:
  stage: to_be_testing
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  tags:
    - tanpopo03
  before_script: []
  script:
    - BACKLOG=`(set +o pipefail; echo "$CI_COMMIT_MESSAGE" | grep -oE 'BTC-[0-9]+' | head -n1)`
    - MR_TITLE=`echo "$CI_COMMIT_MESSAGE" | sed -n '3p'`
    - VERSION=$(cat version.txt)
    - |
      ASSETSLINK=$(cat << EOS
      {
        "name":"BizTelework.msi",
        "url":"https://gitlab.tokyo.optim.co.jp/bizwindows/optimal_biz_windows_telework/-/jobs/artifacts/$CI_COMMIT_SHORT_SHA/raw/artifact/x86/BizTelework.msi?job=artifact"
      }
      EOS
      )
    - |
      DESCRIPTION=$(cat << EOS
      ■バージョン
      * $VERSION
      ■対象のマージリクエスト
      * $MR_TITLE
      EOS
      )
    - release-cli create --tag-name "$BACKLOG" --assets-link "$ASSETSLINK" --description "$DESCRIPTION"

slack_notif:
  stage: slack_notif
  image: alpine:latest
  tags:
    - tanpopo03
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
  before_script:
    - apk --no-cache add curl perl
  script:
    - BACKLOG=`(set +o pipefail; echo "$CI_COMMIT_MESSAGE" | grep -oE 'BTC-[0-9]+' | head -n1)`
    - MR_TITLE=`echo "$CI_COMMIT_MESSAGE" | sed -n '3p'`
    - |
      if [ -n "$BACKLOG" ]; then
        RELEASE_NOTE_LINK="https://gitlab.tokyo.optim.co.jp/bizwindows/optimal_biz_windows_telework/-/releases/${BACKLOG}"
        BACKLOG_LINK="https://biztelework.atlassian.net/browse/${BACKLOG}"
      else
        RELEASE_NOTE_LINK="バックログがありません"
        BACKLOG_LINK="バックログがありません"
      fi
    - |
      TEXT=$(cat <<EOS | perl -pe 's/\n/\\n/g'
      $SLACK_MENTIONS

      *[Windows] マージ通知*

      ■ 対象のバックログ
      * $MR_TITLE
      * $BACKLOG_LINK

      ■ リリースノート
      * $RELEASE_NOTE_LINK
      EOS
      )
      printf '{ "type": "mrkdown", "text": "%s" }' "$TEXT" | curl -X POST -d @- "$SLACK_URL"
